import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { ParsedUrlQuery } from 'querystring';
import React from 'react';
import { Model, ModelId, User, UserId } from '../../lib/schema';
import { fileApi } from '../../lib/server/file-data';

interface Params extends ParsedUrlQuery {
    id: UserId;
}
interface Props {
    userId: UserId;
    user: User;
    models: Record<ModelId, Model>;
}

export default function Page({ userId, user, models }: Props) {
    return (
        <>
            <Head>
                <title>{`${user.name} - OpenModelDB`}</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <main>
                <div>
                    <p>{userId}</p>
                    <p>{user.name}</p>
                    <br />
                    <p>Models:</p>
                    <pre>
                        {Object.keys(models).map((id) => (
                            <span key={id}>
                                <Link href={`/models/${id}`}>{id}</Link>
                                {'\n'}
                            </span>
                        ))}
                    </pre>
                </div>
            </main>
        </>
    );
}

export const getStaticPaths: GetStaticPaths<Params> = async () => {
    const userIds = await fileApi.users.getIds();

    return {
        paths: userIds.map((id) => ({ params: { id } })),
        fallback: false,
    };
};

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
    const userId = context.params?.id;
    if (!userId) throw new Error("Missing path param 'id'");

    const user = await fileApi.users.get(userId);
    const models = await fileApi.models.getAll();

    return {
        props: {
            userId,
            user,
            models: Object.fromEntries(
                [...models].filter(([, model]) => {
                    return model.author === userId || (Array.isArray(model.author) && model.author.includes(userId));
                })
            ),
        },
    };
};
