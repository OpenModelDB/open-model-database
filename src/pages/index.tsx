import { GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import React from 'react';
import { PageContainer } from '../elements/page';
import { Model, ModelId } from '../lib/schema';
import { getAllModelIds, getModelData } from '../lib/server/data';
import { asArray } from '../lib/util';

interface Props {
    modelIds: ModelId[];
    modelData: Record<ModelId, Model>;
}

export default function Page({ modelIds, modelData }: Props) {
    return (
        <>
            <Head>
                <title>OpenModelDB</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <PageContainer>
                <div className="py-4 sm:py-4 lg:py-6">
                    <div className="mx-auto max-w-screen-2xl">
                        <div className="rounded-lg bg-fade-100 p-4 dark:bg-fade-800 md:py-6 lg:py-8">
                            <h1 className="mb-4 text-center text-2xl font-bold capitalize text-accent-500 dark:text-gray-200 md:mb-6 lg:text-3xl">
                                The best place to find AI Upscaling models
                            </h1>

                            <p className="mx-auto max-w-screen-md text-center text-gray-500 md:text-lg">
                                OpenModelDB is a community driven database of AI Upscaling models. We aim to provide a
                                better way to find and compare models than existing sources.
                            </p>

                            <p className="mx-auto max-w-screen-md text-center text-gray-500 md:text-lg">
                                Currently listing <a className="font-bold text-accent-500">{modelIds.length}</a> models.
                            </p>
                        </div>
                    </div>
                </div>
                <pre>
                    {modelIds.map((id) => (
                        <span key={id}>
                            <Link href={`/models/${id}`}>{id}</Link> <span style={{ opacity: 0.5 }}>by</span>{' '}
                            {asArray(modelData[id].author).map((userId) => (
                                <React.Fragment key={userId}>
                                    <Link href={`/users/${userId}`}>{userId}</Link>{' '}
                                </React.Fragment>
                            ))}
                            {'\n'}
                        </span>
                    ))}
                </pre>
            </PageContainer>
        </>
    );
}

export const getStaticProps: GetStaticProps<Props> = async (_context) => {
    const modelIds = await getAllModelIds();
    const modelData = await getModelData(modelIds);
    return {
        props: {
            modelIds: modelIds,
            modelData: Object.fromEntries(modelIds.map((id, i) => [id, modelData[i]])),
        },
    };
};
