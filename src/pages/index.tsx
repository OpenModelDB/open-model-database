import { GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import React from 'react';
import { PageContainer } from 'src/elements/page';
import { Model, ModelId } from 'src/lib/schema';
import { getAllModelIds, getModelData } from 'src/lib/server/data';
import { asArray } from 'src/lib/util';

interface Props {
    modelIds: ModelId[];
    modelData: Record<ModelId, Model>;
}

export default function Page({ modelIds, modelData }: Props) {
    return (
        <>
            <Head>
                <title>OpenModelDB</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <PageContainer>
                <p>{modelIds.length} models</p>
                <br />
                <pre>
                    {modelIds.map((id) => (
                        <span key={id}>
                            <Link href={`/models/${id}`}>{id}</Link> <span style={{ opacity: 0.5 }}>by</span>{' '}
                            {asArray(modelData[id].author).map((userId) => (
                                <React.Fragment key={userId}>
                                    <Link href={`/users/${userId}`}>{userId}</Link>{' '}
                                </React.Fragment>
                            ))}
                            {'\n'}
                        </span>
                    ))}
                </pre>
            </PageContainer>
        </>
    );
}

export const getStaticProps: GetStaticProps<Props> = async (_context) => {
    const modelIds = await getAllModelIds();
    const modelData = await getModelData(modelIds);
    return {
        props: {
            modelIds: modelIds,
            modelData: Object.fromEntries(modelIds.map((id, i) => [id, modelData[i]])),
        },
    };
};
