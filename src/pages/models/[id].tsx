import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { ParsedUrlQuery } from 'querystring';
import React from 'react';
import { DownloadButton } from '../../elements/components/download-button';
import { ImageCarousel } from '../../elements/components/image-carousel';
import { PageContainer } from '../../elements/page';
import { Model, ModelId } from '../../lib/schema';
import { getAllModelIds, getModelData } from '../../lib/server/data';
import { asArray, getColorMode } from '../../lib/util';

interface Params extends ParsedUrlQuery {
    id: ModelId;
}
interface Props {
    modelId: ModelId;
    modelData: Model;
}

const renderTags = (tags: string[]) => (
    <div className="flex flex-row flex-wrap gap-2">
        {tags.map((tag) => {
            return (
                <span
                    className="inline-flex items-center rounded-full bg-fade-100 px-2.5 py-0.5 text-xs font-medium text-fade-800 dark:bg-fade-800 dark:text-fade-200"
                    key={tag}
                >
                    {tag}
                </span>
            );
        })}
    </div>
);

const dummyImages = [
    {
        LR: 'https://imgsli.com/i/07b7f3f2-2d9f-4325-b0a6-824646131308.jpg',
        HR: 'https://imgsli.com/i/986ec7cc-2c3e-43de-8b56-82040abe65a3.jpg',
    },
];

export default function Page({ modelData }: Props) {
    return (
        <>
            <Head>
                <title>{`${modelData.name} - OpenModelDB`}</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <PageContainer>
                {/* Two columns */}
                <div className="grid h-full w-full grid-cols-3 gap-4 py-6">
                    {/* Left column */}
                    <div className="relative col-span-2 flex h-full flex-col gap-4">
                        <ImageCarousel images={dummyImages} />
                        <div className="relative">
                            <div>
                                <h1 className="m-0">{modelData.name}</h1>
                                <p className="m-0">
                                    by{' '}
                                    <strong className="m-0 text-lg text-accent-600 dark:text-accent-500">
                                        {asArray(modelData.author).map((userId) => (
                                            <React.Fragment key={userId}>
                                                <Link href={`/users/${userId}`}>{userId}</Link>
                                            </React.Fragment>
                                        ))}
                                    </strong>
                                </p>
                            </div>
                            <div>
                                <p className="whitespace-pre-line">{modelData.description}</p>
                            </div>
                        </div>
                    </div>
                    {/* Right column */}
                    <div className="col-span-1 w-full">
                        {/* Download Button */}
                        <div className="mb-2">
                            {modelData.resources.map((resource) => {
                                return resource.urls.map((url) => (
                                    <DownloadButton
                                        key={url}
                                        resource={resource}
                                        url={url}
                                    />
                                ));
                            })}
                        </div>

                        <div className="relative table-auto overflow-hidden rounded-lg border-fade-700">
                            <table className="w-full border-collapse overflow-hidden rounded-lg border-fade-700 text-left text-sm text-gray-500 dark:text-gray-400 ">
                                <tbody className="overflow-hidden  rounded-lg ">
                                    <tr className=" ">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-gray-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Architecture
                                        </th>
                                        <td className="px-6 py-4">{modelData.architecture}</td>
                                    </tr>
                                    <tr className="">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-fade-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Scale
                                        </th>
                                        <td className="px-6 py-4 ">{modelData.scale}</td>
                                    </tr>
                                    {modelData.size && (
                                        <tr className="">
                                            <th
                                                className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-fade-900 dark:bg-fade-800 dark:text-white"
                                                scope="row"
                                            >
                                                Size
                                            </th>
                                            <td className="px-6 py-4">{renderTags(modelData.size)}</td>
                                        </tr>
                                    )}
                                    <tr className="">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-gray-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Tags
                                        </th>
                                        <td className="px-6 py-4">{renderTags(modelData.tags)}</td>
                                    </tr>
                                    <tr className="">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-gray-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Color Mode
                                        </th>
                                        <td className="px-6 py-4">
                                            <div className="flex flex-row flex-wrap gap-2 uppercase">
                                                {getColorMode(modelData.inputChannels)} â†’{' '}
                                                {getColorMode(modelData.outputChannels)}
                                            </div>
                                        </td>
                                    </tr>
                                    {Object.entries(modelData)
                                        .filter(
                                            ([key, _value]) =>
                                                ![
                                                    // Handled by other parts of page
                                                    'name',
                                                    'author',
                                                    'description',
                                                    'resources',
                                                    // Already handled manually
                                                    'architecture',
                                                    'scale',
                                                    'size',
                                                    'tags',
                                                    'inputChannels',
                                                    'outputChannels',
                                                    // This is just messed up in the data
                                                    'pretrainedModelG',
                                                ].includes(key)
                                        )
                                        .filter(([_key, value]) => !!value)
                                        .sort()
                                        .map(([key, value]) => {
                                            return (
                                                <tr
                                                    className=""
                                                    key={key}
                                                >
                                                    <th
                                                        className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium capitalize text-fade-900 dark:bg-fade-800 dark:text-white"
                                                        scope="row"
                                                    >
                                                        {key}
                                                    </th>
                                                    <td className="px-6 py-4">
                                                        {Array.isArray(value)
                                                            ? renderTags(value.map((v) => String(v)))
                                                            : value}
                                                    </td>
                                                </tr>
                                            );
                                        })}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </PageContainer>
        </>
    );
}

export const getStaticPaths: GetStaticPaths<Params> = async () => {
    const modelIds = await getAllModelIds();

    return {
        paths: modelIds.map((id) => ({ params: { id } })),
        fallback: false,
    };
};

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
    const modelId = context.params?.id;
    if (!modelId) throw new Error("Missing path param 'id'");

    const modelData = await getModelData(modelId);

    return {
        props: { modelId, modelData },
    };
};
