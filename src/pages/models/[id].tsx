import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { PageContainer } from '../../elements/page';
import { Model, ModelId } from '../../lib/schema';
import { getAllModelIds, getModelData } from '../../lib/server/data';

interface Params extends ParsedUrlQuery {
    id: ModelId;
}
interface Props {
    modelId: ModelId;
    modelData: Model;
}

export default function Page({ modelId, modelData }: Props) {
    console.log('ðŸš€ ~ file: [id].tsx:17 ~ Page ~ modelData:', modelData);
    return (
        <>
            <Head>
                <title>{`${modelData.name} - OpenModelDB`}</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <PageContainer>
                {/* <div>
                    <p>{modelId}</p>
                    <p>{modelData.name}</p>
                    <br />
                    <pre>{JSON.stringify(modelData, undefined, 4)}</pre>
                </div> */}
                {/* Two columns */}
                <div className="grid w-full grid-cols-3 gap-4 py-6">
                    {/* Left column */}
                    <div className="col-span-2 flex flex-col gap-4">
                        <div className="h-72 rounded-lg bg-fade-100 p-4 dark:bg-fade-800"></div>
                        <div className="">
                            <div>
                                <h1 className="m-0">{modelData.name}</h1>
                                <h3 className="m-0">by {modelData.author}</h3>
                            </div>
                            <div>
                                <p className="whitespace-pre-line">{modelData.description}</p>
                            </div>
                        </div>
                    </div>
                    {/* Right column */}
                    <div className="col-span-1 w-full">
                        {/* Download Button */}
                        {modelData.resources.map((resource) => {
                            console.log('ðŸš€ ~ file: [id].tsx:63 ~ {modelData.resources.map ~ resource:', resource);
                            if (resource.type === 'pth') {
                                return (
                                    <div key={resource.sha256}>
                                        {/* Download Label */}
                                        <div className="flex items-center align-middle">
                                            <svg
                                                className="mr-2 h-4 w-4 fill-current"
                                                viewBox="0 0 20.97 24.99"
                                                xmlns="http://www.w3.org/2000/svg"
                                            >
                                                <path
                                                    d="M17.88 7.31 16 9.17a7.61 7.61 0 0 1 0 11 7.89 7.89 0 0 1-11.11 0 7.61 7.61 0 0 1 0-11l4.9-4.84.7-.69V0l-7.4 7.29a10.24 10.24 0 0 0 0 14.71 10.53 10.53 0 0 0 14.81 0 10.25 10.25 0 0 0-.02-14.69Z"
                                                    fill="currentColor"
                                                />
                                                <path
                                                    d="M14.18 6.87a1.35 1.35 0 1 0-1.37-1.35 1.36 1.36 0 0 0 1.37 1.35Z"
                                                    fill="currentColor"
                                                />
                                            </svg>
                                            PyTorch
                                        </div>
                                        <button
                                            className="mr-2 mb-2 inline-flex w-full cursor-pointer items-center rounded-lg border-0 border-accent-700 bg-accent-500 px-5 py-2.5 text-center text-lg font-medium text-white hover:bg-accent-600 focus:outline-none focus:ring-4 focus:ring-accent-700 dark:focus:ring-accent-500"
                                            key={resource.sha256}
                                            type="button"
                                            onClick={() => window.open(resource.urls[0], '_blank')}
                                        >
                                            <div className="w-full">
                                                <svg
                                                    className="mr-2 h-4 w-4 fill-current"
                                                    viewBox="0 0 20 20"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                >
                                                    <path d="M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z" />
                                                </svg>
                                                Download{' '}
                                                {resource.size
                                                    ? `(${(resource.size / 1024 / 1024).toFixed(1)} MB)`
                                                    : ''}
                                            </div>
                                        </button>
                                    </div>
                                );
                            }
                            return 'No Download link';
                        })}

                        {modelData.license}
                    </div>
                </div>
            </PageContainer>
        </>
    );
}

export const getStaticPaths: GetStaticPaths<Params> = async () => {
    const modelIds = await getAllModelIds();

    return {
        paths: modelIds.map((id) => ({ params: { id } })),
        fallback: false,
    };
};

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
    const modelId = context.params?.id;
    if (!modelId) throw new Error("Missing path param 'id'");

    const modelData = await getModelData(modelId);

    return {
        props: { modelId, modelData },
    };
};
