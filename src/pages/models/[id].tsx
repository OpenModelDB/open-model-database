import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { FiExternalLink } from 'react-icons/fi';
import { PageContainer } from '../../elements/page';
import { Model, ModelId } from '../../lib/schema';
import { getAllModelIds, getModelData } from '../../lib/server/data';

interface Params extends ParsedUrlQuery {
    id: ModelId;
}
interface Props {
    modelId: ModelId;
    modelData: Model;
}

export default function Page({ modelId, modelData }: Props) {
    console.log('ðŸš€ ~ file: [id].tsx:17 ~ Page ~ modelData:', modelData);
    return (
        <>
            <Head>
                <title>{`${modelData.name} - OpenModelDB`}</title>
                <meta
                    content="Generated by create next app"
                    name="description"
                />
                <meta
                    content="width=device-width, initial-scale=1"
                    name="viewport"
                />
                <link
                    href="/favicon.ico"
                    rel="icon"
                />
            </Head>
            <PageContainer>
                {/* <div>
                    <p>{modelId}</p>
                    <p>{modelData.name}</p>
                    <br />
                    <pre>{JSON.stringify(modelData, undefined, 4)}</pre>
                </div> */}
                {/* Two columns */}
                <div className="grid w-full grid-cols-3 gap-4 py-6">
                    {/* Left column */}
                    <div className="col-span-2 flex flex-col gap-4">
                        <div className="h-72 rounded-lg bg-fade-100 p-4 dark:bg-fade-800"></div>
                        <div className="">
                            <div>
                                <h1 className="m-0">{modelData.name}</h1>
                                <h3 className="m-0">by {modelData.author}</h3>
                            </div>
                            <div>
                                <p className="whitespace-pre-line">{modelData.description}</p>
                            </div>
                        </div>
                    </div>
                    {/* Right column */}
                    <div className="col-span-1 w-full">
                        {/* Download Button */}
                        {modelData.resources.map((resource) => {
                            return resource.urls.map((url) => {
                                const isExternal = !url.includes('oracle');
                                let host = 'unknown';
                                if (url.includes('github')) {
                                    host = 'GitHub';
                                } else if (url.includes('drive.google')) {
                                    host = 'Google Drive';
                                } else if (url.includes('mega.nz')) {
                                    host = 'Mega';
                                }

                                return (
                                    <div key={resource.sha256}>
                                        <button
                                            className="mr-2 mb-2 inline-flex w-full cursor-pointer items-center rounded-lg border-0 border-accent-700 bg-accent-500 px-5 py-2.5 text-center text-lg font-medium text-white transition duration-100 ease-in-out hover:bg-accent-600 focus:outline-none focus:ring-4 focus:ring-accent-700 dark:focus:ring-accent-500"
                                            type="button"
                                            onClick={() => window.open(url, '_blank')}
                                        >
                                            <div className="w-full">
                                                {isExternal ? (
                                                    <FiExternalLink
                                                        className="mr-2 h-4 w-4"
                                                        viewBox="0 0 22 22"
                                                    />
                                                ) : (
                                                    <svg
                                                        className="mr-2 h-4 w-4 fill-current"
                                                        viewBox="0 0 20 20"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                    >
                                                        <path d="M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z" />
                                                    </svg>
                                                )}
                                                Download{' '}
                                                {resource.size
                                                    ? `(${(resource.size / 1024 / 1024).toFixed(1)} MB)`
                                                    : ''}
                                            </div>
                                        </button>
                                        <div className="w-full text-center">
                                            {isExternal ? `Hosted offsite by ${host}` : 'Hosted by OpenModelDB'}
                                        </div>
                                    </div>
                                );
                            });
                        })}

                        <div className="relative table-auto overflow-hidden rounded-lg">
                            <table className="w-full overflow-hidden rounded-lg text-left text-sm text-gray-500 dark:text-gray-400">
                                <tbody className="overflow-hidden rounded-lg">
                                    <tr className="border-b border-fade-200 dark:border-fade-600">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-gray-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Architecture
                                        </th>
                                        <td className="px-6 py-4">{modelData.architecture}</td>
                                    </tr>
                                    <tr className="border-b">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-fade-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Scale
                                        </th>
                                        <td className="px-6 py-4 ">{modelData.scale}</td>
                                    </tr>
                                    <tr className="border-b">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-fade-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Size
                                        </th>
                                        <td className="px-6 py-4">{modelData.size?.join(', ')}</td>
                                    </tr>
                                    <tr className="border-b">
                                        <th
                                            className="whitespace-nowrap bg-fade-100 px-6 py-4 font-medium text-gray-900 dark:bg-fade-800 dark:text-white"
                                            scope="row"
                                        >
                                            Tags
                                        </th>
                                        <td className="px-6 py-4">
                                            <div className="flex flex-row flex-wrap gap-2">
                                                {modelData.tags.map((tag) => {
                                                    return (
                                                        <span
                                                            className="inline-flex items-center rounded-full bg-fade-100 px-2.5 py-0.5 text-xs font-medium text-fade-800 dark:bg-fade-800 dark:text-fade-200"
                                                            key={tag}
                                                        >
                                                            {tag}
                                                        </span>
                                                    );
                                                })}
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        {modelData.license}
                    </div>
                </div>
            </PageContainer>
        </>
    );
}

export const getStaticPaths: GetStaticPaths<Params> = async () => {
    const modelIds = await getAllModelIds();

    return {
        paths: modelIds.map((id) => ({ params: { id } })),
        fallback: false,
    };
};

export const getStaticProps: GetStaticProps<Props, Params> = async (context) => {
    const modelId = context.params?.id;
    if (!modelId) throw new Error("Missing path param 'id'");

    const modelData = await getModelData(modelId);

    return {
        props: { modelId, modelData },
    };
};
